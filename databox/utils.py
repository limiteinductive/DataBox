# AUTOGENERATED! DO NOT EDIT! File to edit: utils.ipynb (unless otherwise specified).

__all__ = ['function', 'T', 'identity', 'simplify', 'listify', 'setify', 'tuplify', 'get_files']

# Cell
from nbdev.showdoc import *

#export
from typing import Iterable, TypeVar, Generator
from plum import dispatch

function = type(lambda: ())
T = TypeVar('T')

# Cell
def identity(x: T) -> T:
    """Indentity function."""

    return x

# Cell
def simplify(x):
    """Return an object of an iterable if it is lonely."""

    @dispatch
    def _simplify(x): return x

    @dispatch
    def _simplify(fn: function):
        try:
            return fn()
        except TypeError:
            return fn

    @dispatch
    def _simplify(i: Iterable): return next(i.__iter__()) if len(i) == 1 else i

    return _simplify(x)

# Cell
def listify(x, *args):
    """Convert `x` to a `list`."""
    if args:
        x = (x,) + args

    if x is None:
        result = []
    elif isinstance(x, list): result = x
    elif isinstance(x, str) or hasattr(x, "__array__") or hasattr(x, "iloc"):
        result = [x]
    elif isinstance(x, (Iterable, Generator)):
        result = list(x)
    else:
        result = [x]

    return result

# Cell
def setify(x, *args):
    """Convert `x` to a `set`."""

    return set(listify(x, *args))

# Cell
def tuplify(x, *args):
    """Convert `x` to a `tuple`."""

    return tuple(listify(x, *args))

# Cell
def get_files(path, extensions=None, recurse=False, folders=None, followlinks=True):
    """Get all the files in `path`.

    With optional `extensions` selection, optionally with `recurse`, only in `folders`, if specified.

    Parameters
    ----------
    path: path-like
        indicates the place to search for files.
    extensions: str, list-like, optional
        if specified, return only files with specified `extensions`.
    recurse: bool, default=True
        if set to True, return files also present in subfolders recursively.
    folders: path-like, list-like, optional
        if specified, return only files within `folders`.
    followlinks: bool, default=True
        if set to True, will

    Returns
    -------
    list-like
        collection of filenames present at `path` with `extensions`.
    """
    path = Path(path)
    folders = listify(folders)
    extensions = setify(extensions)
    extensions = {e.lower() for e in extensions}

    def simple_getter(p, fs, extensions=None):
        p = Path(p)
        res = [
            p / f
            for f in fs
            if not f.startswith(".")
            and ((not extensions) or f'.{f.split(".")[-1].lower()}' in extensions)
        ]
        return res

    if recurse:
        result = []
        for i, (p, d, f) in enumerate(os.walk(path, followlinks=followlinks)):
            if len(folders) != 0 and i == 0:
                d[:] = [o for o in d if o in folders]
            else:
                d[:] = [o for o in d if not o.startswith(".")]
            if len(folders) != 0 and i == 0 and "." not in folders:
                continue
            result += simple_getter(p, f, extensions)
    else:
        f = [o.name for o in os.scandir(path) if o.is_file()]
        result = simple_getter(path, f, extensions)
    return list(map(str, result))